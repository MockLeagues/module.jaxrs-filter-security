/** * Copyright (C) 2013 Guestful (info@guestful.com) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *         http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * Copyright (C) 2013 Guestful (info@guestful.com) * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.guestful.jaxrs.security.realm;import com.guestful.jaxrs.security.LoginContext;import com.guestful.jaxrs.security.filter.SessionCookieFilter;import com.guestful.jaxrs.security.session.DefaultSession;import com.guestful.jaxrs.security.session.Session;import com.guestful.jaxrs.security.session.SessionConfiguration;import com.guestful.jaxrs.security.session.StoredSession;import com.guestful.jaxrs.security.subject.AuthenticatedSubject;import com.guestful.jaxrs.security.subject.Subject;import com.guestful.jaxrs.security.token.AuthenticationToken;import com.guestful.jaxrs.security.token.HttpCookieToken;import com.guestful.jaxrs.security.util.Crypto;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.security.auth.login.*;import java.util.Collection;/** * @author Mathieu Carbou (mathieu.carbou@gmail.com) */public class HttpCookieRealm extends AbstractRealm {    private static final Logger LOGGER = LoggerFactory.getLogger(HttpCookieRealm.class);    public HttpCookieRealm() {        super(HttpCookieToken.class);    }    @Override    public Subject authenticate(AuthenticationToken token, LoginContext loginContext) throws LoginException {        LOGGER.trace("authenticate() {}", token);        String sessionId = token.getToken() == null ? null : token.getToken().toString();        if (!Crypto.isUuid(sessionId)) {            throw new FailedLoginException("Invalid session ID");        }        String system = token.getSystem();        StoredSession storedSession = getSessionRepository().findSession(system, sessionId);        if (storedSession != null && storedSession.isExpired()) {            LOGGER.trace("authenticate() {} - removing expired session {}", token, sessionId);            getSessionRepository().removeSession(system, storedSession.getId());            storedSession = null;        }        SessionConfiguration sessionConfiguration = getSessionConfigurations().getConfiguration(system);        if (sessionConfiguration.isCheckOrigin() && storedSession != null && !storedSession.getOrigin().equals(loginContext.getOrigin())) {            LOGGER.trace("authenticate() {} - removing stolen session {} - session_origin={}, request_origin={}", token, sessionId, storedSession.getOrigin(), loginContext.getOrigin());            getSessionRepository().removeSession(system, storedSession.getId());            storedSession = null;        }        if (sessionConfiguration.isCheckUserAgent() && storedSession != null && !storedSession.getLastUserAgent().equals(loginContext.getUserAgent())) {            LOGGER.trace("authenticate() {} - removing stolen session {} - session_user-agent={}, request_user-agent={}", token, sessionId, storedSession.getLastUserAgent(), loginContext.getUserAgent());            getSessionRepository().removeSession(system, storedSession.getId());            storedSession = null;        }        if (storedSession == null) {            throw new CredentialExpiredException(system + ": " + sessionId);        }        Session session = new DefaultSession(storedSession);        Account account = getAccountRepository().findAccount(system, new StringPrincipal(storedSession.getPrincipal()));        if (account == null) {            throw new AccountNotFoundException(storedSession.getPrincipal());        }        if (account.isLocked()) {            throw new AccountLockedException(account.getPrincipal().getName());        }        LOGGER.trace("authenticate() {} - found account {} - found session {}", token, account, session);        return new AuthenticatedSubject(            account,            session,            token,            sessionConfiguration,            loginContext);    }    @Override    public void onLogout(Subject subject) {        LOGGER.trace("onLogout() {}", subject);        Collection<String> expired = SessionCookieFilter.getExpiredSystems(subject.getRequest());        expired.add(subject.getSystem());    }}